//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ControllerData/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""b517a6a9-bad4-4fc6-b1e9-7ec47f5f8e15"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dc604ea6-c862-4745-83c9-33bdf27e5734"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""16043829-8b18-4311-8b9d-07b31eef4daa"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AirPuff"",
                    ""type"": ""Button"",
                    ""id"": ""fc442ec0-75bc-47a5-aa44-7038b735c995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""64f9313c-9b1a-4580-9ef1-7577e30d674e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""cc42b9ae-9102-47a5-bda6-2fe034a442a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""844becb8-2df9-4a52-acf7-a3986841e830"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""d478dbbc-82bb-4a90-bba9-0e55682cea97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlsUIMenu"",
                    ""type"": ""Button"",
                    ""id"": ""4545c042-aa70-4c83-b15f-e8a6bc1e6cae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d619f47f-5087-4bce-8df9-71699901c9fd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2883d12-3cdb-4c8e-b569-258ff6312d9b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c91b47ce-585c-462e-9990-454559ad4194"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AirPuff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33084920-b01a-4068-b64d-6b4c84d40116"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b49fe6a-eb5a-4ab7-945b-9d5feb633367"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bab6e6c-d46c-4ae9-890a-48780c8d2c4f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f7bcd90-3759-4014-91a9-fee0431576c2"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bba998e-ee76-4de7-bc4c-0addab3bbe69"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlsUIMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_Move = m_PlayerActionMap.FindAction("Move", throwIfNotFound: true);
        m_PlayerActionMap_Look = m_PlayerActionMap.FindAction("Look", throwIfNotFound: true);
        m_PlayerActionMap_AirPuff = m_PlayerActionMap.FindAction("AirPuff", throwIfNotFound: true);
        m_PlayerActionMap_Shoot = m_PlayerActionMap.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerActionMap_Selection = m_PlayerActionMap.FindAction("Selection", throwIfNotFound: true);
        m_PlayerActionMap_Cancel = m_PlayerActionMap.FindAction("Cancel", throwIfNotFound: true);
        m_PlayerActionMap_Start = m_PlayerActionMap.FindAction("Start", throwIfNotFound: true);
        m_PlayerActionMap_ControlsUIMenu = m_PlayerActionMap.FindAction("ControlsUIMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private IPlayerActionMapActions m_PlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerActionMap_Move;
    private readonly InputAction m_PlayerActionMap_Look;
    private readonly InputAction m_PlayerActionMap_AirPuff;
    private readonly InputAction m_PlayerActionMap_Shoot;
    private readonly InputAction m_PlayerActionMap_Selection;
    private readonly InputAction m_PlayerActionMap_Cancel;
    private readonly InputAction m_PlayerActionMap_Start;
    private readonly InputAction m_PlayerActionMap_ControlsUIMenu;
    public struct PlayerActionMapActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerActionMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerActionMap_Move;
        public InputAction @Look => m_Wrapper.m_PlayerActionMap_Look;
        public InputAction @AirPuff => m_Wrapper.m_PlayerActionMap_AirPuff;
        public InputAction @Shoot => m_Wrapper.m_PlayerActionMap_Shoot;
        public InputAction @Selection => m_Wrapper.m_PlayerActionMap_Selection;
        public InputAction @Cancel => m_Wrapper.m_PlayerActionMap_Cancel;
        public InputAction @Start => m_Wrapper.m_PlayerActionMap_Start;
        public InputAction @ControlsUIMenu => m_Wrapper.m_PlayerActionMap_ControlsUIMenu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLook;
                @AirPuff.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAirPuff;
                @AirPuff.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAirPuff;
                @AirPuff.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAirPuff;
                @Shoot.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnShoot;
                @Selection.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSelection;
                @Selection.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSelection;
                @Selection.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSelection;
                @Cancel.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCancel;
                @Start.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnStart;
                @ControlsUIMenu.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnControlsUIMenu;
                @ControlsUIMenu.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnControlsUIMenu;
                @ControlsUIMenu.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnControlsUIMenu;
            }
            m_Wrapper.m_PlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @AirPuff.started += instance.OnAirPuff;
                @AirPuff.performed += instance.OnAirPuff;
                @AirPuff.canceled += instance.OnAirPuff;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Selection.started += instance.OnSelection;
                @Selection.performed += instance.OnSelection;
                @Selection.canceled += instance.OnSelection;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @ControlsUIMenu.started += instance.OnControlsUIMenu;
                @ControlsUIMenu.performed += instance.OnControlsUIMenu;
                @ControlsUIMenu.canceled += instance.OnControlsUIMenu;
            }
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    public interface IPlayerActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAirPuff(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSelection(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnControlsUIMenu(InputAction.CallbackContext context);
    }
}
